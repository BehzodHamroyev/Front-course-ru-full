const React = require('react');

const importJsx = require('import-jsx');

const {
  EVENT_CHANGE,
  EVENT_END
} = require('../../task-runner');

const TaskList = importJsx('./TaskList');

const throttle = (fn, threshold = 16) => {
  let throttled = false;
  let lastCalledArguments = null;

  const executeAfterThreshold = () => setTimeout(() => {
    if (lastCalledArguments) {
      fn(...lastCalledArguments);
      lastCalledArguments = null;
      executeAfterThreshold();
    } else {
      throttled = false;
    }
  }, threshold);

  return (...args) => {
    if (throttled) {
      lastCalledArguments = args;
    } else {
      throttled = true;
      executeAfterThreshold();
      fn(...args);
    }
  };
};

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      tasks: this.props.taskRunner.getState()
    };
    this.ended = false;

    const updateTasks = () => {
      if (!this.ended) {
        const tasks = this.props.taskRunner.getState();
        this.setState({
          tasks
        });
      }
    };

    this.handleEnd = () => {
      updateTasks();
      this.ended = true;
    };

    this.handleChange = throttle(updateTasks, 200);
  }

  componentDidMount() {
    this.props.taskRunner.on(EVENT_END, this.handleEnd);
    this.props.taskRunner.on(EVENT_CHANGE, this.handleChange);
  }

  componentWillUnmount() {
    this.ended = true;
    this.props.taskRunner.removeListener(EVENT_END, this.handleEnd);
    this.props.taskRunner.removeListener(EVENT_CHANGE, this.handleChange);
  }

  render() {
    return /*#__PURE__*/React.createElement(TaskList, {
      tasks: this.state.tasks
    });
  }

}

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJpbXBvcnRKc3giLCJFVkVOVF9DSEFOR0UiLCJFVkVOVF9FTkQiLCJUYXNrTGlzdCIsInRocm90dGxlIiwiZm4iLCJ0aHJlc2hvbGQiLCJ0aHJvdHRsZWQiLCJsYXN0Q2FsbGVkQXJndW1lbnRzIiwiZXhlY3V0ZUFmdGVyVGhyZXNob2xkIiwic2V0VGltZW91dCIsImFyZ3MiLCJBcHAiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJ0YXNrcyIsInRhc2tSdW5uZXIiLCJnZXRTdGF0ZSIsImVuZGVkIiwidXBkYXRlVGFza3MiLCJzZXRTdGF0ZSIsImhhbmRsZUVuZCIsImhhbmRsZUNoYW5nZSIsImNvbXBvbmVudERpZE1vdW50Iiwib24iLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZUxpc3RlbmVyIiwicmVuZGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBQXpCOztBQUNBLE1BQU07QUFBRUUsRUFBQUEsWUFBRjtBQUFnQkMsRUFBQUE7QUFBaEIsSUFBOEJILE9BQU8sQ0FBQyxtQkFBRCxDQUEzQzs7QUFFQSxNQUFNSSxRQUFRLEdBQUdILFNBQVMsQ0FBQyxZQUFELENBQTFCOztBQUVBLE1BQU1JLFFBQVEsR0FBRyxDQUFDQyxFQUFELEVBQUtDLFNBQVMsR0FBRyxFQUFqQixLQUF3QjtBQUN2QyxNQUFJQyxTQUFTLEdBQUcsS0FBaEI7QUFDQSxNQUFJQyxtQkFBbUIsR0FBRyxJQUExQjs7QUFFQSxRQUFNQyxxQkFBcUIsR0FBRyxNQUM1QkMsVUFBVSxDQUFDLE1BQU07QUFDZixRQUFJRixtQkFBSixFQUF5QjtBQUN2QkgsTUFBQUEsRUFBRSxDQUFDLEdBQUdHLG1CQUFKLENBQUY7QUFDQUEsTUFBQUEsbUJBQW1CLEdBQUcsSUFBdEI7QUFDQUMsTUFBQUEscUJBQXFCO0FBQ3RCLEtBSkQsTUFJTztBQUNMRixNQUFBQSxTQUFTLEdBQUcsS0FBWjtBQUNEO0FBQ0YsR0FSUyxFQVFQRCxTQVJPLENBRFo7O0FBV0EsU0FBTyxDQUFDLEdBQUdLLElBQUosS0FBYTtBQUNsQixRQUFJSixTQUFKLEVBQWU7QUFDYkMsTUFBQUEsbUJBQW1CLEdBQUdHLElBQXRCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xKLE1BQUFBLFNBQVMsR0FBRyxJQUFaO0FBQ0FFLE1BQUFBLHFCQUFxQjtBQUNyQkosTUFBQUEsRUFBRSxDQUFDLEdBQUdNLElBQUosQ0FBRjtBQUNEO0FBQ0YsR0FSRDtBQVNELENBeEJEOztBQTBCQSxNQUFNQyxHQUFOLFNBQWtCZCxLQUFLLENBQUNlLFNBQXhCLENBQWtDO0FBQ2hDQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUTtBQUNqQixVQUFNQSxLQUFOO0FBRUEsU0FBS0MsS0FBTCxHQUFhO0FBQ1hDLE1BQUFBLEtBQUssRUFBRSxLQUFLRixLQUFMLENBQVdHLFVBQVgsQ0FBc0JDLFFBQXRCO0FBREksS0FBYjtBQUlBLFNBQUtDLEtBQUwsR0FBYSxLQUFiOztBQUVBLFVBQU1DLFdBQVcsR0FBRyxNQUFNO0FBQ3hCLFVBQUksQ0FBQyxLQUFLRCxLQUFWLEVBQWlCO0FBQ2YsY0FBTUgsS0FBSyxHQUFHLEtBQUtGLEtBQUwsQ0FBV0csVUFBWCxDQUFzQkMsUUFBdEIsRUFBZDtBQUNBLGFBQUtHLFFBQUwsQ0FBYztBQUFFTCxVQUFBQTtBQUFGLFNBQWQ7QUFDRDtBQUNGLEtBTEQ7O0FBT0EsU0FBS00sU0FBTCxHQUFpQixNQUFNO0FBQ3JCRixNQUFBQSxXQUFXO0FBQ1gsV0FBS0QsS0FBTCxHQUFhLElBQWI7QUFDRCxLQUhEOztBQUlBLFNBQUtJLFlBQUwsR0FBb0JwQixRQUFRLENBQUNpQixXQUFELEVBQWMsR0FBZCxDQUE1QjtBQUNEOztBQUVESSxFQUFBQSxpQkFBaUIsR0FBRztBQUNsQixTQUFLVixLQUFMLENBQVdHLFVBQVgsQ0FBc0JRLEVBQXRCLENBQXlCeEIsU0FBekIsRUFBb0MsS0FBS3FCLFNBQXpDO0FBQ0EsU0FBS1IsS0FBTCxDQUFXRyxVQUFYLENBQXNCUSxFQUF0QixDQUF5QnpCLFlBQXpCLEVBQXVDLEtBQUt1QixZQUE1QztBQUNEOztBQUVERyxFQUFBQSxvQkFBb0IsR0FBRztBQUNyQixTQUFLUCxLQUFMLEdBQWEsSUFBYjtBQUNBLFNBQUtMLEtBQUwsQ0FBV0csVUFBWCxDQUFzQlUsY0FBdEIsQ0FBcUMxQixTQUFyQyxFQUFnRCxLQUFLcUIsU0FBckQ7QUFDQSxTQUFLUixLQUFMLENBQVdHLFVBQVgsQ0FBc0JVLGNBQXRCLENBQXFDM0IsWUFBckMsRUFBbUQsS0FBS3VCLFlBQXhEO0FBQ0Q7O0FBRURLLEVBQUFBLE1BQU0sR0FBRztBQUNQLHdCQUFPLG9CQUFDLFFBQUQ7QUFBVSxNQUFBLEtBQUssRUFBRSxLQUFLYixLQUFMLENBQVdDO0FBQTVCLE1BQVA7QUFDRDs7QUFyQytCOztBQXdDbENhLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQm5CLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgaW1wb3J0SnN4ID0gcmVxdWlyZSgnaW1wb3J0LWpzeCcpO1xuY29uc3QgeyBFVkVOVF9DSEFOR0UsIEVWRU5UX0VORCB9ID0gcmVxdWlyZSgnLi4vLi4vdGFzay1ydW5uZXInKTtcblxuY29uc3QgVGFza0xpc3QgPSBpbXBvcnRKc3goJy4vVGFza0xpc3QnKTtcblxuY29uc3QgdGhyb3R0bGUgPSAoZm4sIHRocmVzaG9sZCA9IDE2KSA9PiB7XG4gIGxldCB0aHJvdHRsZWQgPSBmYWxzZTtcbiAgbGV0IGxhc3RDYWxsZWRBcmd1bWVudHMgPSBudWxsO1xuXG4gIGNvbnN0IGV4ZWN1dGVBZnRlclRocmVzaG9sZCA9ICgpID0+XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAobGFzdENhbGxlZEFyZ3VtZW50cykge1xuICAgICAgICBmbiguLi5sYXN0Q2FsbGVkQXJndW1lbnRzKTtcbiAgICAgICAgbGFzdENhbGxlZEFyZ3VtZW50cyA9IG51bGw7XG4gICAgICAgIGV4ZWN1dGVBZnRlclRocmVzaG9sZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3R0bGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSwgdGhyZXNob2xkKTtcblxuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAodGhyb3R0bGVkKSB7XG4gICAgICBsYXN0Q2FsbGVkQXJndW1lbnRzID0gYXJncztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3R0bGVkID0gdHJ1ZTtcbiAgICAgIGV4ZWN1dGVBZnRlclRocmVzaG9sZCgpO1xuICAgICAgZm4oLi4uYXJncyk7XG4gICAgfVxuICB9O1xufTtcblxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdGFza3M6IHRoaXMucHJvcHMudGFza1J1bm5lci5nZXRTdGF0ZSgpLFxuICAgIH07XG5cbiAgICB0aGlzLmVuZGVkID0gZmFsc2U7XG5cbiAgICBjb25zdCB1cGRhdGVUYXNrcyA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5lbmRlZCkge1xuICAgICAgICBjb25zdCB0YXNrcyA9IHRoaXMucHJvcHMudGFza1J1bm5lci5nZXRTdGF0ZSgpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdGFza3MgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuaGFuZGxlRW5kID0gKCkgPT4ge1xuICAgICAgdXBkYXRlVGFza3MoKTtcbiAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgIH07XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aHJvdHRsZSh1cGRhdGVUYXNrcywgMjAwKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMudGFza1J1bm5lci5vbihFVkVOVF9FTkQsIHRoaXMuaGFuZGxlRW5kKTtcbiAgICB0aGlzLnByb3BzLnRhc2tSdW5uZXIub24oRVZFTlRfQ0hBTkdFLCB0aGlzLmhhbmRsZUNoYW5nZSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICB0aGlzLnByb3BzLnRhc2tSdW5uZXIucmVtb3ZlTGlzdGVuZXIoRVZFTlRfRU5ELCB0aGlzLmhhbmRsZUVuZCk7XG4gICAgdGhpcy5wcm9wcy50YXNrUnVubmVyLnJlbW92ZUxpc3RlbmVyKEVWRU5UX0NIQU5HRSwgdGhpcy5oYW5kbGVDaGFuZ2UpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8VGFza0xpc3QgdGFza3M9e3RoaXMuc3RhdGUudGFza3N9IC8+O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19